{
	"name": "dataflow2",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "Orders2023",
						"type": "DatasetReference"
					},
					"name": "Order2023"
				},
				{
					"dataset": {
						"referenceName": "Order2024",
						"type": "DatasetReference"
					},
					"name": "Order2024"
				},
				{
					"dataset": {
						"referenceName": "Order2025",
						"type": "DatasetReference"
					},
					"name": "Order2025"
				},
				{
					"dataset": {
						"referenceName": "ProductsData",
						"type": "DatasetReference"
					},
					"name": "ProductsData"
				},
				{
					"dataset": {
						"referenceName": "CustomerData",
						"type": "DatasetReference"
					},
					"name": "Customers"
				},
				{
					"dataset": {
						"referenceName": "SalesExecData",
						"type": "DatasetReference"
					},
					"name": "SalesExec"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "DataflowOp",
						"type": "DatasetReference"
					},
					"name": "ProductRankFinal"
				},
				{
					"dataset": {
						"referenceName": "AzureSqlTable5",
						"type": "DatasetReference"
					},
					"name": "AggregatedData"
				},
				{
					"dataset": {
						"referenceName": "OrderFinal",
						"type": "DatasetReference"
					},
					"name": "OrderFinal"
				}
			],
			"transformations": [
				{
					"name": "union1"
				},
				{
					"name": "TypeCastData"
				},
				{
					"name": "CustomerCast"
				},
				{
					"name": "OrdersProduct"
				},
				{
					"name": "DropExtraProductId"
				},
				{
					"name": "BringCustomerData"
				},
				{
					"name": "select1"
				},
				{
					"name": "CustAgeCat"
				},
				{
					"name": "aggregate1"
				},
				{
					"name": "SortTotalOrders"
				},
				{
					"name": "ProductRank"
				},
				{
					"name": "aggregate2"
				},
				{
					"name": "window1"
				},
				{
					"name": "DataSplit"
				}
			],
			"scriptLines": [
				"source(output(",
				"          OrderID as string,",
				"          OrderDate as string,",
				"          ProductID as string,",
				"          Quantity as string,",
				"          UnitPrice as string,",
				"          CustomerID as string,",
				"          SalesExecID as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> Order2023",
				"source(output(",
				"          OrderID as string,",
				"          OrderDate as string,",
				"          ProductID as string,",
				"          Quantity as string,",
				"          UnitPrice as string,",
				"          CustomerID as string,",
				"          SalesExecID as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> Order2024",
				"source(output(",
				"          OrderID as string,",
				"          OrderDate as string,",
				"          ProductID as string,",
				"          Quantity as string,",
				"          UnitPrice as string,",
				"          CustomerID as string,",
				"          SalesExecID as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> Order2025",
				"source(output(",
				"          ProductID as string,",
				"          ProductName as string,",
				"          {Product Category} as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> ProductsData",
				"source(output(",
				"          CustomerID as string,",
				"          CustomerName as string,",
				"          Phone as string,",
				"          City as string,",
				"          Country as string,",
				"          Age as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> Customers",
				"source(output(",
				"          SalesExecID as string,",
				"          Name as string,",
				"          Age as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> SalesExec",
				"Order2023, Order2024, Order2025 union(byName: true)~> union1",
				"union1 cast(output(",
				"          OrderDate as date 'yyyy-MM-dd',",
				"          Quantity as integer,",
				"          UnitPrice as double",
				"     ),",
				"     errors: true) ~> TypeCastData",
				"Customers cast(output(",
				"          Age as integer",
				"     ),",
				"     errors: true) ~> CustomerCast",
				"TypeCastData, ProductsData join(union1@ProductID == ProductsData@ProductID,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> OrdersProduct",
				"OrdersProduct select(mapColumn(",
				"          OrderID,",
				"          OrderDate,",
				"          Quantity,",
				"          UnitPrice,",
				"          CustomerID,",
				"          SalesExecID,",
				"          ProductID = ProductsData@ProductID,",
				"          ProductName,",
				"          {Product Category}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> DropExtraProductId",
				"DropExtraProductId, CustomerCast join(DropExtraProductId@CustomerID == Customers@CustomerID,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> BringCustomerData",
				"BringCustomerData select(mapColumn(",
				"          OrderID,",
				"          OrderDate,",
				"          Quantity,",
				"          UnitPrice,",
				"          SalesExecID,",
				"          ProductID,",
				"          ProductName,",
				"          {Product Category},",
				"          CustomerID = Customers@CustomerID,",
				"          CustomerName,",
				"          Phone,",
				"          City,",
				"          Country,",
				"          Age",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"select1 derive(CustomerCat = iif(Age<=20,'Young',\r",
				"iif(between(Age, 20, 50),'Adult',\r",
				"'Senior Citizen')\r",
				")) ~> CustAgeCat",
				"CustAgeCat aggregate(groupBy(ProductName),",
				"     TotalOrders = sum(Quantity),",
				"          OrderAmt = round(sum(Quantity*UnitPrice),2)) ~> aggregate1",
				"aggregate1 sort(desc(TotalOrders, true)) ~> SortTotalOrders",
				"CustAgeCat window(over({Product Category}),",
				"     desc(Quantity, true),",
				"     ProductRank = rank()) ~> ProductRank",
				"CustAgeCat aggregate(groupBy({Product Category},",
				"          ProductName),",
				"     TotalQuantity = sum(Quantity)) ~> aggregate2",
				"aggregate2 window(over({Product Category}),",
				"     desc(TotalQuantity, true),",
				"     RankProd = rank()) ~> window1",
				"CustAgeCat split(CustomerCat=='Young',",
				"     CustomerCat=='Adult',",
				"     disjoint: false) ~> DataSplit@(Young, Adult, SeniorCitizen)",
				"window1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError') ~> ProductRankFinal",
				"window1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError') ~> AggregatedData",
				"CustAgeCat sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          OrderID as string,",
				"          OrderDate as string,",
				"          ProductID as string,",
				"          Quantity as string,",
				"          UnitPrice as string,",
				"          CustomerID as string,",
				"          SalesExecID as string",
				"     ),",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> OrderFinal"
			]
		}
	}
}