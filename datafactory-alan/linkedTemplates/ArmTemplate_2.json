{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "datafactory-alan"
		},
		"ComboABC_properties_Combo_ABC_parameters_A": {
			"type": "int",
			"defaultValue": 5
		},
		"ComboABC_properties_Combo_ABC_parameters_B": {
			"type": "int",
			"defaultValue": 5
		},
		"ComboABC_properties_Combo_ABC_parameters_C": {
			"type": "int",
			"defaultValue": 10
		},
		"StorageTrigger_properties_Combo_ABC_parameters_A": {
			"type": "int",
			"defaultValue": 5
		},
		"StorageTrigger_properties_Combo_ABC_parameters_B": {
			"type": "int",
			"defaultValue": 5
		},
		"StorageTrigger_properties_Combo_ABC_parameters_C": {
			"type": "int",
			"defaultValue": 5
		},
		"StorageTrigger_properties_typeProperties_scope": {
			"type": "string",
			"defaultValue": "/subscriptions/796630e1-c779-4137-b4b9-c128824a9067/resourceGroups/azuretraining/providers/Microsoft.Storage/storageAccounts/storageaccalan"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/GetMetaData')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Metadata1",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "GetMetaData",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"itemName",
								"itemType",
								"lastModified",
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get Metadata1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Metadata1').output.childItems",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Get Metadata2",
									"type": "GetMetadata",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "GetMetaDatacsv",
											"type": "DatasetReference",
											"parameters": {
												"FileName": {
													"value": "@item().name",
													"type": "Expression"
												}
											}
										},
										"fieldList": [
											"itemName",
											"itemType",
											"lastModified",
											"size"
										],
										"storeSettings": {
											"type": "AzureBlobFSReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										},
										"formatSettings": {
											"type": "DelimitedTextReadSettings"
										}
									}
								},
								{
									"name": "DateToday",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Get Metadata2",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "TodayDate",
										"value": {
											"value": "@substring(utcNow(),0,10 )",
											"type": "Expression"
										}
									}
								},
								{
									"name": "FileDate",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Get Metadata2",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "FileDate",
										"value": {
											"value": "@substring(activity('Get Metadata2').output.lastModified,0,10)",
											"type": "Expression"
										}
									}
								},
								{
									"name": "If Condition1",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "FileDate",
											"dependencyConditions": [
												"Succeeded"
											]
										},
										{
											"activity": "DateToday",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@equals(variables('FileDate'), variables('TodayDate'))",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "FileNotUpdated",
												"type": "Wait",
												"dependsOn": [],
												"userProperties": [],
												"typeProperties": {
													"waitTimeInSeconds": 1
												}
											}
										],
										"ifTrueActivities": [
											{
												"name": "AdlsToSql1",
												"type": "Copy",
												"dependsOn": [],
												"policy": {
													"timeout": "0.12:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "DelimitedTextSource",
														"storeSettings": {
															"type": "AzureBlobFSReadSettings",
															"recursive": true,
															"enablePartitionDiscovery": false
														},
														"formatSettings": {
															"type": "DelimitedTextReadSettings"
														}
													},
													"sink": {
														"type": "DelimitedTextSink",
														"storeSettings": {
															"type": "AzureBlobFSWriteSettings"
														},
														"formatSettings": {
															"type": "DelimitedTextWriteSettings",
															"quoteAllText": true,
															"fileExtension": ".txt"
														}
													},
													"enableStaging": false,
													"translator": {
														"type": "TabularTranslator",
														"mappings": [
															{
																"source": {
																	"name": "OrderID",
																	"type": "String",
																	"physicalType": "String"
																},
																"sink": {
																	"name": "OrderID",
																	"type": "String",
																	"physicalType": "nvarchar"
																}
															},
															{
																"source": {
																	"name": "OrderDate",
																	"type": "String",
																	"physicalType": "String"
																},
																"sink": {
																	"name": "OrderDate",
																	"type": "String",
																	"physicalType": "nvarchar"
																}
															},
															{
																"source": {
																	"name": "CustomerID",
																	"type": "String",
																	"physicalType": "String"
																},
																"sink": {
																	"name": "CustomerID",
																	"type": "String",
																	"physicalType": "nvarchar"
																}
															},
															{
																"source": {
																	"name": "ProductID",
																	"type": "String",
																	"physicalType": "String"
																},
																"sink": {
																	"name": "ProductID",
																	"type": "String",
																	"physicalType": "nvarchar"
																}
															},
															{
																"source": {
																	"name": "Quantity",
																	"type": "String",
																	"physicalType": "String"
																},
																"sink": {
																	"name": "Quantity",
																	"type": "String",
																	"physicalType": "nvarchar"
																}
															},
															{
																"source": {
																	"name": "TotalAmount",
																	"type": "String",
																	"physicalType": "String"
																},
																"sink": {
																	"name": "TotalAmount",
																	"type": "String",
																	"physicalType": "nvarchar"
																}
															}
														],
														"typeConversion": true,
														"typeConversionSettings": {
															"allowDataTruncation": true,
															"treatBooleanAsNumber": false
														}
													}
												},
												"inputs": [
													{
														"referenceName": "ParameterizedCsvData",
														"type": "DatasetReference",
														"parameters": {
															"FileName": {
																"value": "@activity('Get Metadata2').output.itemName",
																"type": "Expression"
															}
														}
													}
												],
												"outputs": [
													{
														"referenceName": "DelimitedText1",
														"type": "DatasetReference",
														"parameters": {
															"FileName": {
																"value": "@concat(variables('FileDate'),'_',activity('Get Metadata2').output.itemName)",
																"type": "Expression"
															}
														}
													}
												]
											}
										]
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"TodayDate": {
						"type": "String"
					},
					"FileDate": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2025-04-25T12:55:02Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/LabActivity1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup1",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "Select * from Cntrl.MetadataLab where Load_freq = 'Daily'",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "LookupTables",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "IngestDatasets",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lookup1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup1').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Copy data1",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "AzureSqlSink",
											"preCopyScript": {
												"value": "@concat('Truncate Table ',item().LandingSchema,'.',item().LandingTable)",
												"type": "Expression"
											},
											"writeBehavior": "insert",
											"sqlWriterUseTableLock": false,
											"tableOption": "autoCreate",
											"disableMetricsCollection": false
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "LabActiv",
											"type": "DatasetReference",
											"parameters": {
												"FileAddress": {
													"value": "@item().Adls_loc",
													"type": "Expression"
												},
												"Filename": {
													"value": "@item().Filename",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "LabActivSqlTable",
											"type": "DatasetReference",
											"parameters": {
												"SchemaName": {
													"value": "@item().LandingSchema",
													"type": "Expression"
												},
												"TableName": {
													"value": "@item().LandingTable",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "StoredProcedure1",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Copy data1",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": {
											"value": "@item().StoredProc",
											"type": "Expression"
										}
									},
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabase",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2025-04-28T10:39:27Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/LookUp_forEach')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "Select * from Cntrl.Metadata ",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "LookUpTable",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lookup",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"batchCount": 3,
							"activities": [
								{
									"name": "Copy data1",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "AzureSqlSink",
											"preCopyScript": {
												"value": "@concat('Truncate Table ',item().LandingSchema,'.',item().LandingTable)",
												"type": "Expression"
											},
											"writeBehavior": "insert",
											"sqlWriterUseTableLock": false,
											"tableOption": "autoCreate",
											"disableMetricsCollection": false
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "Dataset1",
											"type": "DatasetReference",
											"parameters": {
												"FileAddress": {
													"value": "@item().Adls_Location",
													"type": "Expression"
												},
												"FileName": {
													"value": "@item().FileName",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "AzureSqlTable3",
											"type": "DatasetReference",
											"parameters": {
												"SchemaName": {
													"value": "@item().LandingSchema",
													"type": "Expression"
												},
												"TableName": {
													"value": "@item().LandingTable",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2025-04-24T12:54:39Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ParametrizedPipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "AdlsToSql1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "OrderID",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "OrderID",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "OrderDate",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "OrderDate",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "CustomerID",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "CustomerID",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "ProductID",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "ProductID",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Quantity",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Quantity",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "TotalAmount",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "TotalAmount",
											"type": "String",
											"physicalType": "nvarchar"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ParameterizedCsvData",
								"type": "DatasetReference",
								"parameters": {
									"FileName": "orders.csv"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "ParameterizedSqlTable",
								"type": "DatasetReference",
								"parameters": {
									"SchemaName": "Landing",
									"TableName": "orders"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2025-04-24T11:30:44Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/adlstosql')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "CSV_TO_SQL",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ADLS_csv",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AzureSqlTable",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2025-04-22T12:14:27Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipeline1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ParquetSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "ParquetReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "Parquet1",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AzureSqlTable4",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ComboABC')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "Combo_ABC",
							"type": "PipelineReference"
						},
						"parameters": {
							"A": "[parameters('ComboABC_properties_Combo_ABC_parameters_A')]",
							"B": "[parameters('ComboABC_properties_Combo_ABC_parameters_B')]",
							"C": "[parameters('ComboABC_properties_Combo_ABC_parameters_C')]"
						}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2025-05-06T05:05:00",
						"timeZone": "India Standard Time",
						"schedule": {
							"minutes": [
								45
							],
							"hours": [
								11
							]
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Order",
								"type": "DatasetReference"
							},
							"name": "OrdersData"
						},
						{
							"dataset": {
								"referenceName": "Products",
								"type": "DatasetReference"
							},
							"name": "ProductsData"
						},
						{
							"dataset": {
								"referenceName": "Customers",
								"type": "DatasetReference"
							},
							"name": "CustomersData"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DataflowOp",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "FilterAprilData"
						},
						{
							"name": "TypeCast"
						},
						{
							"name": "select1"
						},
						{
							"name": "cast1"
						},
						{
							"name": "PhoneStatus"
						}
					],
					"scriptLines": [
						"source(output(",
						"          OrderID as string,",
						"          OrderDate as string,",
						"          CustomerID as string,",
						"          ProductID as string,",
						"          Quantity as string,",
						"          TotalAmount as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> OrdersData",
						"source(output(",
						"          ProductID as string,",
						"          ProductName as string,",
						"          Category as string,",
						"          Price as string,",
						"          StockQuantity as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> ProductsData",
						"source(output(",
						"          CustomerID as string,",
						"          FirstName as string,",
						"          LastName as string,",
						"          Email as string,",
						"          Phone as string,",
						"          City as string,",
						"          Country as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> CustomersData",
						"TypeCast filter(month(OrderDate)==4) ~> FilterAprilData",
						"OrdersData cast(output(",
						"          OrderDate as date 'yyyy-MM-dd',",
						"          Quantity as integer,",
						"          TotalAmount as double",
						"     ),",
						"     errors: true) ~> TypeCast",
						"cast1 select(mapColumn(",
						"          ProductID,",
						"          ProductName,",
						"          ProdCat = Category,",
						"          Price,",
						"          StockQuantity",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"ProductsData cast(output(",
						"          Price as double,",
						"          StockQuantity as integer",
						"     ),",
						"     errors: true) ~> cast1",
						"CustomersData derive(PhoneValid = iif(length(Phone)==10,'Valid','NotValid')) ~> PhoneStatus",
						"FilterAprilData sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     recreate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow2')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Orders2023",
								"type": "DatasetReference"
							},
							"name": "Order2023"
						},
						{
							"dataset": {
								"referenceName": "Order2024",
								"type": "DatasetReference"
							},
							"name": "Order2024"
						},
						{
							"dataset": {
								"referenceName": "Order2025",
								"type": "DatasetReference"
							},
							"name": "Order2025"
						},
						{
							"dataset": {
								"referenceName": "ProductsData",
								"type": "DatasetReference"
							},
							"name": "ProductsData"
						},
						{
							"dataset": {
								"referenceName": "CustomerData",
								"type": "DatasetReference"
							},
							"name": "Customers"
						},
						{
							"dataset": {
								"referenceName": "SalesExecData",
								"type": "DatasetReference"
							},
							"name": "SalesExec"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "AzureSqlTable5",
								"type": "DatasetReference"
							},
							"name": "AggregatedData"
						},
						{
							"dataset": {
								"referenceName": "OrderFinal",
								"type": "DatasetReference"
							},
							"name": "OrderFinal"
						}
					],
					"transformations": [
						{
							"name": "union1"
						},
						{
							"name": "TypeCastData"
						},
						{
							"name": "CustomerCast"
						},
						{
							"name": "OrdersProduct"
						},
						{
							"name": "DropExtraProductId"
						},
						{
							"name": "BringCustomerData"
						},
						{
							"name": "select1"
						},
						{
							"name": "CustAgeCat"
						},
						{
							"name": "aggregate1"
						},
						{
							"name": "SortTotalOrders"
						},
						{
							"name": "ProductRank"
						},
						{
							"name": "aggregate2"
						},
						{
							"name": "window1"
						},
						{
							"name": "DataSplit"
						}
					],
					"scriptLines": [
						"source(output(",
						"          OrderID as string,",
						"          OrderDate as string,",
						"          ProductID as string,",
						"          Quantity as string,",
						"          UnitPrice as string,",
						"          CustomerID as string,",
						"          SalesExecID as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Order2023",
						"source(output(",
						"          OrderID as string,",
						"          OrderDate as string,",
						"          ProductID as string,",
						"          Quantity as string,",
						"          UnitPrice as string,",
						"          CustomerID as string,",
						"          SalesExecID as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Order2024",
						"source(output(",
						"          OrderID as string,",
						"          OrderDate as string,",
						"          ProductID as string,",
						"          Quantity as string,",
						"          UnitPrice as string,",
						"          CustomerID as string,",
						"          SalesExecID as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Order2025",
						"source(output(",
						"          ProductID as string,",
						"          ProductName as string,",
						"          {Product Category} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> ProductsData",
						"source(output(",
						"          CustomerID as string,",
						"          CustomerName as string,",
						"          Phone as string,",
						"          City as string,",
						"          Country as string,",
						"          Age as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Customers",
						"source(output(",
						"          SalesExecID as string,",
						"          Name as string,",
						"          Age as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> SalesExec",
						"Order2023, Order2024, Order2025 union(byName: true)~> union1",
						"union1 cast(output(",
						"          OrderDate as date 'yyyy-MM-dd',",
						"          Quantity as integer,",
						"          UnitPrice as double",
						"     ),",
						"     errors: true) ~> TypeCastData",
						"Customers cast(output(",
						"          Age as integer",
						"     ),",
						"     errors: true) ~> CustomerCast",
						"TypeCastData, ProductsData join(union1@ProductID == ProductsData@ProductID,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> OrdersProduct",
						"OrdersProduct select(mapColumn(",
						"          OrderID,",
						"          OrderDate,",
						"          Quantity,",
						"          UnitPrice,",
						"          CustomerID,",
						"          SalesExecID,",
						"          ProductID = ProductsData@ProductID,",
						"          ProductName,",
						"          {Product Category}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> DropExtraProductId",
						"DropExtraProductId, CustomerCast join(DropExtraProductId@CustomerID == Customers@CustomerID,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> BringCustomerData",
						"BringCustomerData select(mapColumn(",
						"          OrderID,",
						"          OrderDate,",
						"          Quantity,",
						"          UnitPrice,",
						"          SalesExecID,",
						"          ProductID,",
						"          ProductName,",
						"          {Product Category},",
						"          CustomerID = Customers@CustomerID,",
						"          CustomerName,",
						"          Phone,",
						"          City,",
						"          Country,",
						"          Age",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 derive(CustomerCat = iif(Age<=20,'Young',\r",
						"iif(between(Age, 20, 50),'Adult',\r",
						"'Senior Citizen')\r",
						")) ~> CustAgeCat",
						"CustAgeCat aggregate(groupBy(ProductName),",
						"     TotalOrders = sum(Quantity),",
						"          OrderAmt = round(sum(Quantity*UnitPrice),2)) ~> aggregate1",
						"aggregate1 sort(desc(TotalOrders, true)) ~> SortTotalOrders",
						"CustAgeCat window(over({Product Category}),",
						"     desc(Quantity, true),",
						"     ProductRank = rank()) ~> ProductRank",
						"CustAgeCat aggregate(groupBy({Product Category},",
						"          ProductName),",
						"     TotalQuantity = sum(Quantity)) ~> aggregate2",
						"aggregate2 window(over({Product Category}),",
						"     desc(TotalQuantity, true),",
						"     RankProd = rank()) ~> window1",
						"CustAgeCat split(CustomerCat=='Young',",
						"     CustomerCat=='Adult',",
						"     disjoint: false) ~> DataSplit@(Young, Adult, SeniorCitizen)",
						"window1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     truncate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     partitionBy('hash', 1)) ~> AggregatedData",
						"CustAgeCat sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          OrderID as string,",
						"          OrderDate as string,",
						"          ProductID as string,",
						"          Quantity as string,",
						"          UnitPrice as string,",
						"          CustomerID as string,",
						"          SalesExecID as string",
						"     ),",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> OrderFinal"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/StorageTrigger')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "Combo_ABC",
							"type": "PipelineReference"
						},
						"parameters": {
							"A": "[parameters('StorageTrigger_properties_Combo_ABC_parameters_A')]",
							"B": "[parameters('StorageTrigger_properties_Combo_ABC_parameters_B')]",
							"C": "[parameters('StorageTrigger_properties_Combo_ABC_parameters_C')]"
						}
					}
				],
				"type": "BlobEventsTrigger",
				"typeProperties": {
					"blobPathBeginsWith": "/data/blobs/Abc/",
					"blobPathEndsWith": "orders_data.csv",
					"ignoreEmptyBlobs": true,
					"scope": "[parameters('StorageTrigger_properties_typeProperties_scope')]",
					"events": [
						"Microsoft.Storage.BlobCreated"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/FinalOrderDataFlow')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dataflow2",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"Order2023": {},
									"Order2024": {},
									"Order2025": {},
									"ProductsData": {},
									"Customers": {},
									"SalesExec": {},
									"AggregatedData": {},
									"OrderFinal": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/dataflow2')]"
			]
		}
	]
}